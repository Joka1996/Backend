@using System.Globalization
@using Litium.Accelerator.Utilities
@using Microsoft.AspNetCore.Http;
@model Litium.Accelerator.ViewModels.PaginationViewModel

@if (Model != null && Model.PageCount > 1)
{
    <ul class="pagination">
        @if (Model.CurrentPageIndex > 1)
        {
            @Html.Raw(CreatePagerControl("<<", Model.CurrentPageIndex - 1, Model.CurrentPageIndex <= 1))
        }

        @if (Model.IntervalStart > 0 && Model.EdgeEntries > 0)
        {
            var end = Convert.ToInt32(Math.Min(Model.EdgeEntries, Model.IntervalStart));
            for (var i = 0; i < end; i++)
            {
                @Html.Raw(CreatePagerItem(i))
            }

            if (Model.EdgeEntries < Model.IntervalStart)
            {
                @Html.Raw(CreatePagerControl("...", 0, true))
            }
        }

        @for (var i = Model.IntervalStart; i < Model.IntervalEnd; i++)
        {
            @Html.Raw(CreatePagerItem(i))
        }

        @if (Model.IntervalEnd < Model.PageCount && Model.EdgeEntries > 0)
        {
            if (Model.PageCount - Model.EdgeEntries > Model.IntervalEnd)
            {
                @Html.Raw(CreatePagerControl("...", 0, true))
            }

            var begin = Convert.ToInt32(Math.Max(Model.PageCount - Model.EdgeEntries, Model.IntervalEnd));
            for (var i = begin; i < Model.PageCount; i++)
            {
                @Html.Raw(CreatePagerItem(i))
            }
        }

        @if (Model.CurrentPageIndex < Model.PageCount)
        {
            @Html.Raw(CreatePagerControl(">>", Model.CurrentPageIndex + 1, Model.CurrentPageIndex == Model.PageCount))
        }
    </ul>
}

@functions {

    private string GetHref(int page)
    {
        var isApiRequest = Context.Request.Path.StartsWithSegments(new PathString("/api"));
        var url = new Uri(isApiRequest && Context.Request.Headers.TryGetValue("Referer", out var referer) ? referer.ToString() : string.Concat(Context.Request.Path.Value, Context.Request.QueryString.Value), UriKind.RelativeOrAbsolute);
        return UrlUtilities.AddOrReplaceUrlParameter(url, "page", page.ToString(CultureInfo.InvariantCulture));
    }

    string CreatePagerItem(int pageIndex)
    {
        var publicPageIndex = pageIndex + 1;
        var name = "" + publicPageIndex;
        var href = GetHref(publicPageIndex);
        var current = publicPageIndex == Model.CurrentPageIndex;
        return DisplayPaginationItem(name, href, current);
    }

    string CreatePagerControl(string textKey, int pageIndex = 0, bool disabled = false)
    {
        var href = pageIndex == 0 ? "" : GetHref(pageIndex);
        disabled = pageIndex == 0 ? true : disabled;
        return DisplayPaginationItem(Html.WebSiteString(textKey), href, false, disabled);
    }

    string DisplayPaginationItem(string name = "", string href = "", bool current = false, bool disabled = false)
    {
        string[] cssArray = new string[] { "pagination__link", current ? "pagination__link--current" : "", disabled ? "pagination__link--disabled" : "" };
        string cssClass = String.Join(" ", Array.FindAll(cssArray, c => !string.IsNullOrEmpty(c)));


        return $"<li class=\"pagination__item\"><a class=\"{cssClass}\" href=\"{href}\">{name}</a></li>";
    }
}

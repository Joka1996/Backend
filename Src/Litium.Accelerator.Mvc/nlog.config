<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  autoReload="true"
      throwExceptions="true"
      internalLogLevel="Fatal"
      internalLogFile="../nlog-internal.log"
      >

    <!-- 
    See https://github.com/NLog/NLog/wiki
    for information on customizing logging rules and outputs.
    -->
    <!--bytt ut denna mot den existerande under <variable name="logDirectory" value="${basedir}.."/>-->
	<variable name="logDirectory" value="${basedir}../logs"/>
    <!-- To create the logfile in files directory the logDirectory can be set from the configuration -->
    <!--<variable name="logDirectory" value="${configsetting:item=Litium.Folder.Local}/Logs"/>-->

    <targets async="true">

        <target xsi:type="File"
                name="file"
                fileName="${logDirectory}${dir-separator}litium.log"
                archiveAboveSize="10240000"
                maxArchiveFiles="2"
                maxArchiveDays="1"
                archiveNumbering="Sequence"
		        autoFlush="false"
                cleanupFileName="false"
		        concurrentWrites="false"
		        keepFileOpen="true"
		        openFileCacheTimeout="15"
                openFileFlushTimeout="1"
                layout="${longdate} [App:${appdomain:format=short}] [${activity:property=TraceId:whenEmpty=${activityid}}] [${pad:padding=-5:inner=${uppercase:${level}}}] [${threadname}] ${logger} - ${message} ${exception:format=tostring}" />

        <target xsi:type="File"
                name="fileElasticsearch"
                fileName="${logDirectory}${dir-separator}elasticsearch.log"
                archiveAboveSize="10240000"
                maxArchiveFiles="2"
                maxArchiveDays="1"
                archiveNumbering="Sequence"
		        autoFlush="false"
                cleanupFileName="false"
		        concurrentWrites="false"
		        keepFileOpen="true"
		        openFileCacheTimeout="15"
                openFileFlushTimeout="1"
                layout="${longdate} [App:${appdomain:format=short}] [${activity:property=TraceId:whenEmpty=${activityid}}] [${pad:padding=-5:inner=${uppercase:${level}}}] [${threadname}] ${logger} - ${message} ${exception:format=tostring}" />

        <target xsi:type="ColoredConsole" name="lifetimeConsole" layout="${MicrosoftConsoleLayout}" />
    </targets>
    <rules>
        <!-- setup rules for specific logger -->
        <logger name="IdentityServer4.Startup" minlevel="Trace" maxlevel="Debug" final="true"/>
        <logger name="Microsoft.AspNetCore.*" minlevel="Trace" maxlevel="Info" final="true" />
        <logger name="Microsoft.Extensions.Hosting.Internal.Host" level="Debug" writeTo="lifetimeConsole" />
        <logger name="Microsoft.Extensions.Http.*" minlevel="Trace" maxlevel="Info" final="true" />
        <logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole" />
        <logger name="Nest.IElasticClient" minlevel="Trace" writeTo="fileElasticsearch" final="true" />

        <!-- Block all logging -->
        <logger name="IdentityServer4.Hosting.EndpointRouter" minlevel="Trace" final="true"/>
        <logger name="Microsoft.EntityFrameworkCore.*" minlevel="Trace" final="true"/>

        <logger name="Litium.Application.Caching.CacheLoader" minlevel="Trace" final="true" />
        <logger name="Litium.Application.Common.FifoExecution" minlevel="Trace" final="true" />
        <logger name="Litium.Events.EventBroker" minlevel="Trace" final="true" />
        <logger name="Litium.Web.Media.Storage.StorageRequestContext" minlevel="Trace" final="true" />
        <logger name="Litium.Web.Security.LitiumAuthenticationHandler" minlevel="Trace" final="true" />

        <!-- Block trace writes -->
        <logger name="Litium.Caching.MemoryCacheService" maxlevel="Trace" final="true" />
        <logger name="Litium.Caching.DistributedMemoryCacheService" maxlevel="Trace" final="true" />
        <logger name="Litium.ServiceBus.ServiceBusQueue" maxlevel="Trace" final="true" />
        <logger name="Litium.ServiceBus.ServiceBusTopic" maxlevel="Trace" final="true" />

        <!-- Send all remaining logging into the log-file -->
        <logger name="*" minlevel="Trace" writeTo="file" />
        
        <!-- When running as development environment, log to console-->
        <logger name="*" minlevel="Error" writeTo="lifetimeConsole">
            <filters>
                <when condition="not equals('${environment:ASPNETCORE_ENVIRONMENT}','Development')" action="Ignore" />
            </filters>
        </logger>
    </rules>

</nlog>